schemaType: Bundle
schemaVersion: 1.0.1
registry: "ghcr.io/back-stack"
name: showcase-bundle
description: "The BACK stack showcase bundle"

dockerfile: template.Dockerfile

credentials:
  # required
  - name: github-token
    env: GITHUB_TOKEN
    applyTo:
      - install
  - name: vault-token
    env: VAULT_TOKEN
    applyTo:
      - install
  - name: azure-credentials
    env: AZURE_CREDENTIALS
    applyTo:
      - install
  - name: aws-credentials
    env: AWS_CREDENTIALS
    applyTo:
      - install
  # optional
  - name: kubeconfig
    path: /home/nonroot/.kube/config
    required: false
    applyTo:
      - install

parameters:
  - name: cluster-type
    env: CLUSTER_TYPE
    type: string
    default: kind
    enum:
      - kind
      - eks
      - aks
      - gke
  - name: repository
    env: REPOSITORY
    type: string
    default: https://github.com/back-stack/showcase
  - name: backstage-host
    env: BACKSTAGE_HOST
    type: string
    default: backstage-7f000001.nip.io
  - name: argocd-host
    env: ARGOCD_HOST
    type: string
    default: argocd-7f000001.nip.io
  - name: vault-host
    env: VAULT_HOST
    type: string
    default: vault-7f000001.nip.io

outputs:
  - name: kubeconfig
    type: file
    path: /home/nonroot/.kube/config
    applyTo:
      - install
  - name: kubeconfig-external
    type: file
    path: /home/nonroot/.kube/config-external
    applyTo:
      - install
  - name: ingress
    type: string
    applyTo:
      - install
  - name: argo-initial-passwd
    type: file
    path: /home/nonroot/argo_initial_passwd
    applyTo:
      - install

mixins:
  - exec
  - docker
  - kubernetes
  - helm3:
      clientVersion: v3.13.2
      repositories:
        crossplane-stable:
          url: https://charts.crossplane.io/stable
        ingress-nginx:
          url: https://kubernetes.github.io/ingress-nginx

# Define the steps that should execute when the bundle is installed
install:
  - exec:
      description: "Ensure Kubernetes Connection"
      command: ./helpers.sh
      arguments:
        - ensure_kubernetes
  - helm3:
      description: "Install ingress-nginx"
      name: ingress-nginx
      namespace: ingress-nginx
      chart: ingress-nginx/ingress-nginx
      version: 4.8.3
      wait: true
      values:
        - ./manifests/ingress-nginx/values-${bundle.parameters.cluster-type}.yaml
      outputs:
        - name: ingress
          resourceType: service
          resourceName: ingress-nginx-controller
          namespace: ingress-nginx
          jsonPath: "{.status.loadBalancer.ingress}"
  - helm3:
      description: "Install crossplane"
      name: crossplane
      namespace: crossplane-system
      chart: crossplane-stable/crossplane
      wait: true
      set:
        args: "{--enable-external-secret-stores}"
  - helm3:
      description: "Install vault ess plugin"
      name: ess-plugin-vault
      namespace: crossplane-system
      chart: oci://xpkg.upbound.io/crossplane-contrib/ess-plugin-vault
      wait: true
      values:
        - ./manifests/ess-plugin-vault.yaml
  - kubernetes:
      description: "Define Crossplane RuntimeConfig"
      manifests:
        - ./manifests/providers/runtime-config.yaml
  - kubernetes:
      description: "Define Crossplane Providers"
      manifests:
        - ./manifests/providers/providers.yaml
  - exec:
      description: "Wait for providers to become healthy"
      command: ./helpers.sh
      arguments:
        - validate_providers
  - kubernetes:
      description: "Configure Crossplane Providers"
      manifests:
        - ./manifests/providers/provider-configs.yaml
  - kubernetes:
      description: "Install BACK Stack Configuration"
      manifests:
        - ./manifests/back-stack.yaml
  - exec:
      description: "Validate BACK Stack Configuration"
      command: ./helpers.sh
      arguments:
        - validate_configuration
  - exec:
      description: "Deploy BACK Stack"
      command: ./helpers.sh
      arguments:
        - deploy_backstack_hub
  - exec:
      description: "Install Secrets"
      command: ./helpers.sh
      arguments:
        - deploy_secrets
  - exec:
      description: "Grab ArgoCD Initial Password"
      command: ./helpers.sh
      arguments:
        - return_argo_initial_pass
      # outputs:
      #   - name: argo-initial-passwd
      #     # this feels hackish. Porter has a limitation of needing to pass through
      #     # regex/jsonrgex rather than just giving you the direct output of
      #     # the command you want output from...
      #     regex: '^.'

# Define the steps that should execute when the bundle is upgraded
upgrade:
  - exec:
      description: "Not implemented at this time"
      command: ./helpers.sh
      arguments:
        - upgrade

# Define the steps that should execute when the bundle is uninstalled
uninstall:
  - exec:
      description: "Uninstall BACK Stack"
      command: ./helpers.sh
      arguments:
        - uninstall
